#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('slackintegration:server');
var http = require('http');
var https = require('https');
const fs = require('fs');
var worker = require('../worker_scripts/worker');
require('dotenv').config()

// SSL Certs on Production
if (process.env.NODE_ENV == "production") {
  const options = {
    cert: fs.readFileSync('/etc/letsencrypt/live/see3d.org/fullchain.pem'),
    key: fs.readFileSync('/etc/letsencrypt/live/see3d.org/privkey.pem')
  };
  var secure_port = normalizePort(process.env.SECURE_PORT || '8081');
  console.log('Secure Server started on ' + normalizePort(process.env.SECURE_PORT || '8081'))
  var secure_server = https.createServer(options, app);
  secure_server.listen(secure_port)
}

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '8080');


app.set('port', port);
console.log('sanity check')
console.log('Server started on ' + normalizePort(process.env.PORT || '8080'))

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Run Worker Scripts
 */
//setInterval(worker.checkPrintRequests, 3000);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}